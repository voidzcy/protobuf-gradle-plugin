repositories {
    maven { url 'https://maven.google.com' }
    maven { url "https://plugins.gradle.org/m2/" }
}

buildscript {
  repositories {
    maven { url 'https://maven.google.com' }
    maven { url "https://plugins.gradle.org/m2/" }
  }
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        applicationId "io.grpc.helloworldexample"
        minSdkVersion 7
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    flavorDimensions 'abi', 'version'

    productFlavors {
        freeapp {
          dimension 'version'
        }
        retailapp {
          dimension 'version'
        }
        x86 {
          dimension 'abi'
        }
        arm {
          dimension 'abi'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'io/grpc/testing/integration/empty.proto'
        exclude 'io/grpc/testing/integration/test.proto'
        exclude 'io/grpc/testing/integration/messages.proto'
        exclude 'tmp/stuff.proto'
    }

    // https://github.com/square/okio/issues/58
    lintOptions {
        warning 'InvalidPackage'
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "1g"
        threadCount 1 // reduce predex thread count to limit memory usage
    }
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.0.0'
  }
  plugins {
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
    }
    javalite {
      artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
    }
  }
  generateProtoTasks {
    all()*.plugins {
      javalite { }
    }
    ofNonTest()*.plugins {
      grpc {
        // Options added to --grpc_out
        option 'lite'
      }
    }
  }
}

dependencies {
    compile 'com.android.support:appcompat-v7:23.4.0'
    compile 'com.squareup.okhttp:okhttp:2.7.5'
    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.google.protobuf:protobuf-lite:3.0.0'
    compile 'io.grpc:grpc-core:1.0.0-pre2'
    compile 'io.grpc:grpc-stub:1.0.0-pre2'
    compile 'io.grpc:grpc-okhttp:1.0.0-pre2'
    compile('io.grpc:grpc-protobuf-lite:1.0.0-pre2') {
      // Otherwise Android compile will complain "Multiple dex files define ..."
      exclude module: "protobuf-lite"
    }
    compile(project(':testProjectLite')) {
      exclude module: "protobuf-lite"
    }
    protobuf files('lib/protos.jar')
    testCompile 'junit:junit:4.12'
}

def assertJavaCompileHasProtoGeneratedDir(Object variant, Collection<String> codegenPlugins) {
  rootProject.assertJavaCompileHasProtoGeneratedDir(project, variant.name, variant.javaCompileProvider.get(), codegenPlugins)
}

afterEvaluate {
  // 'gradle test' will run the unit tests, which is still experimental in
  // Android plugin, and would do nothing with our setup. We make 'test' to
  // trigger the "androidTest" Java compile tasks.
  android.testVariants.each { testVariant ->
    test.dependsOn testVariant.javaCompileProvider
  }

  test.doLast {
    assert [
        'generateArmFreeappDebugAndroidTestProto',
        'generateArmFreeappDebugUnitTestProto',
        'generateArmFreeappReleaseUnitTestProto',
        'generateArmFreeappDebugProto',
        'generateArmFreeappReleaseProto',
        'generateArmRetailappDebugAndroidTestProto',
        'generateArmRetailappDebugUnitTestProto',
        'generateArmRetailappReleaseUnitTestProto',
        'generateArmRetailappDebugProto',
        'generateArmRetailappReleaseProto',
        'generateX86FreeappDebugAndroidTestProto',
        'generateX86FreeappDebugUnitTestProto',
        'generateX86FreeappReleaseUnitTestProto',
        'generateX86FreeappDebugProto',
        'generateX86FreeappReleaseProto',
        'generateX86RetailappDebugAndroidTestProto',
        'generateX86RetailappDebugUnitTestProto',
        'generateX86RetailappReleaseUnitTestProto',
        'generateX86RetailappDebugProto',
        'generateX86RetailappReleaseProto',
    ] as Set == protobuf.generateProtoTasks.all().collect({ it.name }) as Set

    assert [
        'generateArmFreeappDebugAndroidTestProto',
        'generateArmFreeappDebugUnitTestProto',
        'generateArmFreeappReleaseUnitTestProto',
        'generateArmRetailappDebugAndroidTestProto',
        'generateArmRetailappDebugUnitTestProto',
        'generateArmRetailappReleaseUnitTestProto',
        'generateX86FreeappDebugAndroidTestProto',
        'generateX86FreeappDebugUnitTestProto',
        'generateX86FreeappReleaseUnitTestProto',
        'generateX86RetailappDebugAndroidTestProto',
        'generateX86RetailappDebugUnitTestProto',
        'generateX86RetailappReleaseUnitTestProto',
    ] as Set == protobuf.generateProtoTasks.ofTest().collect({ it.name }) as Set

    assert [
        'generateArmFreeappDebugProto',
        'generateArmFreeappReleaseProto',
        'generateArmRetailappDebugProto',
        'generateArmRetailappReleaseProto',
        'generateX86FreeappDebugProto',
        'generateX86FreeappReleaseProto',
        'generateX86RetailappDebugProto',
        'generateX86RetailappReleaseProto',
    ] as Set == protobuf.generateProtoTasks.ofNonTest().collect({ it.name }) as Set

    assert [
        'generateArmFreeappDebugAndroidTestProto',
        'generateArmFreeappDebugUnitTestProto',
        'generateArmFreeappReleaseUnitTestProto',
        'generateArmFreeappDebugProto',
        'generateArmFreeappReleaseProto',
        'generateX86FreeappDebugAndroidTestProto',
        'generateX86FreeappDebugUnitTestProto',
        'generateX86FreeappReleaseUnitTestProto',
        'generateX86FreeappDebugProto',
        'generateX86FreeappReleaseProto',
    ] as Set == protobuf.generateProtoTasks.ofFlavor('freeapp').collect({ it.name }) as Set

    assert [
        'generateArmRetailappDebugAndroidTestProto',
        'generateArmRetailappDebugUnitTestProto',
        'generateArmRetailappReleaseUnitTestProto',
        'generateArmRetailappDebugProto',
        'generateArmRetailappReleaseProto',
        'generateX86RetailappDebugAndroidTestProto',
        'generateX86RetailappDebugUnitTestProto',
        'generateX86RetailappReleaseUnitTestProto',
        'generateX86RetailappDebugProto',
        'generateX86RetailappReleaseProto',
    ] as Set == protobuf.generateProtoTasks.ofFlavor('retailapp').collect({ it.name }) as Set

    assert [
        'generateX86FreeappDebugAndroidTestProto',
        'generateX86FreeappDebugUnitTestProto',
        'generateX86FreeappReleaseUnitTestProto',
        'generateX86FreeappDebugProto',
        'generateX86FreeappReleaseProto',
        'generateX86RetailappDebugAndroidTestProto',
        'generateX86RetailappDebugUnitTestProto',
        'generateX86RetailappReleaseUnitTestProto',
        'generateX86RetailappDebugProto',
        'generateX86RetailappReleaseProto',
    ] as Set == protobuf.generateProtoTasks.ofFlavor('x86').collect({ it.name }) as Set

    assert [
        'generateArmFreeappDebugAndroidTestProto',
        'generateArmFreeappDebugUnitTestProto',
        'generateArmFreeappReleaseUnitTestProto',
        'generateArmFreeappDebugProto',
        'generateArmFreeappReleaseProto',
        'generateArmRetailappDebugAndroidTestProto',
        'generateArmRetailappDebugUnitTestProto',
        'generateArmRetailappReleaseUnitTestProto',
        'generateArmRetailappDebugProto',
        'generateArmRetailappReleaseProto',
    ] as Set == protobuf.generateProtoTasks.ofFlavor('arm').collect({ it.name }) as Set

    assert [
        'generateArmFreeappDebugAndroidTestProto',
        'generateArmFreeappDebugUnitTestProto',
        'generateArmFreeappDebugProto',
        'generateArmRetailappDebugAndroidTestProto',
        'generateArmRetailappDebugUnitTestProto',
        'generateArmRetailappDebugProto',
        'generateX86FreeappDebugAndroidTestProto',
        'generateX86FreeappDebugUnitTestProto',
        'generateX86FreeappDebugProto',
        'generateX86RetailappDebugAndroidTestProto',
        'generateX86RetailappDebugUnitTestProto',
        'generateX86RetailappDebugProto'
    ] as Set == protobuf.generateProtoTasks.ofBuildType('debug').collect({ it.name }) as Set

    assert [
        'generateArmFreeappReleaseProto',
        'generateArmFreeappReleaseUnitTestProto',
        'generateArmRetailappReleaseProto',
        'generateArmRetailappReleaseUnitTestProto',
        'generateX86FreeappReleaseProto',
        'generateX86FreeappReleaseUnitTestProto',
        'generateX86RetailappReleaseProto',
        'generateX86RetailappReleaseUnitTestProto',
    ] as Set == protobuf.generateProtoTasks.ofBuildType('release').collect({ it.name }) as Set

    assert ['generateX86FreeappDebugAndroidTestProto'] as Set ==
            protobuf.generateProtoTasks.ofVariant('x86FreeappDebugAndroidTest').collect({ it.name }) as Set

    // "androidTest" sourceSet is not a flavor
    assert [] as Set == protobuf.generateProtoTasks.ofFlavor('androidTest').collect({ it.name }) as Set

    // "unitTest" sourceset is not a flavor
    assert [] as Set == protobuf.generateProtoTasks.ofFlavor('unitTest').collect({ it.name }) as Set

      android.applicationVariants.each { variant ->
      assertJavaCompileHasProtoGeneratedDir(variant, ['javalite', 'grpc'])
    }

    android.testVariants.each { variant ->
      assertJavaCompileHasProtoGeneratedDir(variant, ['javalite'])
    }
  }
}
